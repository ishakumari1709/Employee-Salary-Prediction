# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U4P5dQHITrBQEbPJdxPlwY-bzLLdMQm8

# New section
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

sal_data=pd.read_csv("Dataset09-Employee-salary-prediction.csv")
sal_data.head()

sal_data.shape

sal_data.columns

sal_data.columns=['Age','Gender','Degree','Job_Title','Experience_years','Salary']

sal_data.dtypes

sal_data.info()

sal_data[sal_data.duplicated()]

sal_data1=sal_data.drop_duplicates(keep='first')

sal_data1.isnull().sum()

sal_data1 = sal_data1.dropna(how='any')

sal_data1.shape

sal_data1.describe()

sal_data1.head()

corr=sal_data1[['Age','Experience_years','Salary']].corr()

corr

#here we can see that as age increase salary also increases and experience is also directly proportional to experience

sns.heatmap(corr,annot=True)

#here we can observe the color difference

#data visulaisation

sal_data1['Degree'].value_counts() #we can see that mostly are from bachelors degree

sal_data1['Degree'].value_counts().plot(kind='bar')

sal_data1['Job_Title'].value_counts()

sal_data1['Job_Title'].unique()

sal_data1['Gender'].value_counts().plot(kind='bar')

sal_data1['Age'].value_counts().plot(kind='bar')

sal_data1.Age.plot(kind='hist') #for numerical variable we should use histogram or bix plot

sal_data1.Age.plot(kind='box')

sal_data1.Salary.plot(kind='hist')

sns.lineplot(x='Age', y='Salary', data=sal_data1, marker='o')

plt.xlabel("Age")
plt.ylabel("Salary")
plt.title("Salary vs Age")

from sklearn.preprocessing import LabelEncoder
Lable_Encoder=LabelEncoder()

sal_data1['Gender_Encode']=Lable_Encoder.fit_transform(sal_data1['Gender'])

sal_data1['Degree_Encode']=Lable_Encoder.fit_transform(sal_data1['Degree'])

sal_data1['Job_Title_Encode']=Lable_Encoder.fit_transform(sal_data1['Job_Title'])

#data after label encoding

sal_data1.head()

sal_data = sal_data1.copy()

sal_data1['Degree_Encode']=Lable_Encoder.fit_transform(sal_data['Degree'])

sal_data1['Job_Title_Encode']=Lable_Encoder.fit_transform(sal_data['Job_Title'])

sal_data1['Gender_Encode']=Lable_Encoder.fit_transform(sal_data['Gender'])

sal_data1.head()

from sklearn.preprocessing import StandardScaler

std_scalar=StandardScaler()

sal_data1['Age_scaled']=std_scalar.fit_transform(sal_data1[['Age']])

sal_data1['Experience_years_scaled']=std_scalar.fit_transform(sal_data1[['Experience_years']])

#after scaling

sal_data1.head() #bring them into common scale -1 to 1 as there a large difference bbetween them

# @title Age vs Experience_years

from matplotlib import pyplot as plt
sal_data1.plot(kind='scatter', x='Age', y='Experience_years', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

#for dependent and independent features

#apply regression

x = sal_data1[['Age_scaled', 'Gender_Encode', 'Degree_Encode', 'Job_Title_Encode', 'Experience_years_scaled']]
y = sal_data1['Salary']

x.head()

#spliting data into testing and training

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

x_train.shape #80% data for traning

x_test.shape

#model development

from sklearn.linear_model import LinearRegression

Linear_Regression_model=LinearRegression()

#model traning

Linear_Regression_model.fit(x_train,y_train)

#model prediction

y_pred=Linear_Regression_model.predict(x_test)
y_pred

import pandas as pd
df=pd.DataFrame({'y_Actual' : y_test,'y_Predicted':y_pred})

df['Error']=df['y_Actual']-df['y_Predicted']
df['abs_error']=abs(df['Error'])

df

Mean_abs_error=df['abs_error'].mean()
Mean_abs_error

#Model Evalution

from sklearn.metrics import accuracy_score,r2_score
from sklearn.metrics import mean_squared_error,mean_absolute_error

#Model Accuracy

r2_score(y_test,y_pred)

print(f'Accuracy: {r2_score(y_test,y_pred),4*100}%')

#Mean Absoulte Error

round(mean_absolute_error(y_test,y_pred),2)

print(f"Mean Absolute Error: {round(mean_absolute_error(y_test,y_pred),2)}")

#root mean Squared Error

rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error (RMSE) =', rmse)

#coefficients

Linear_Regression_model.coef_

#intercepts:

Linear_Regression_model.intercept_

sal_data1.head()

Age1=std_scalar.transform([[49]])
Age=5.86448677
Gender=0
Degree=2
Job_Title=22
Experience_years1=std_scalar.transform([[15]])
Experience_years=0.774415815
#find the salary

std_scalar.transform([[15]])[0]

Emp_salary = Linear_Regression_model.predict([[Age1[0][0], Gender, Degree, Job_Title, Experience_years1[0][0]]])

Emp_salary

print("Salary of that Employee",Emp_salary[0])

from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LinearRegression

# Encoding Degree and Job Title
degree_encoder = LabelEncoder()
sal_data1['Degree_Encode'] = degree_encoder.fit_transform(sal_data1['Degree'])

job_title_encoder = LabelEncoder()
sal_data1['Job_Title_Encode'] = job_title_encoder.fit_transform(sal_data1['Job_Title'])

std_scalar = StandardScaler()
sal_data1['Age_scaled'] = std_scalar.fit_transform(sal_data1[['Age']])
sal_data1['Experience_years_scaled'] = std_scalar.fit_transform(sal_data1[['Experience_years']])

x = sal_data1[['Age_scaled', 'Gender_Encode', 'Degree_Encode', 'Job_Title_Encode', 'Experience_years_scaled']]
y = sal_data1['Salary']

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(x_train, y_train)

# Taking input from user
age = float(input("Enter Age: "))
gender = int(input("Enter Gender (0 for Male, 1 for Female): "))
degree = input("Enter Degree (e.g., Bachelors, Masters): ")
job_title = input("Enter Job Title (e.g., Manager, Analyst): ")
experience_years = float(input("Enter Experience Years: "))

# Encoding and scaling user input
# Handle unseen labels by adding a new category if not present
if degree not in degree_encoder.classes_:
    degree_encoder.classes_ = np.append(degree_encoder.classes_, degree)
degree_encoded = degree_encoder.transform([degree])[0]  # Encoding degree

# Handle unseen labels by adding a new category if not present
if job_title not in job_title_encoder.classes_:
    job_title_encoder.classes_ = np.append(job_title_encoder.classes_, job_title)
job_title_encoded = job_title_encoder.transform([job_title])[0] # Encoding job title

age_scaled = std_scalar.transform([[age]])[0][0] # Scaling age
experience_scaled = std_scalar.transform([[experience_years]])[0][0] # Scaling experience years

predicted_salary = model.predict([[age_scaled, gender, degree_encoded, job_title_encoded, experience_scaled]])
print(f"Predicted Salary: {predicted_salary[0]:.2f}")
import joblib

# Save the trained model
joblib.dump(model, 'salary_prediction_model.pkl')

# Save the encoders
joblib.dump(degree_encoder, 'degree_encoder.pkl')
joblib.dump(job_title_encoder, 'job_title_encoder.pkl')

# Save the scaler
joblib.dump(std_scalar, 'scaler.pkl')

print("âœ… Model and encoders saved successfully!")


